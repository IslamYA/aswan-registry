from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *

import math

def get_input(prompt, default, cast_func):
    val = input(f"{prompt} [{default}]: ")
    return cast_func(val) if val.strip() else default

# User input
density = get_input("Enter density (tonne/mm^3, e.g. 7.8e-09)", 7.8e-09, float)
E = get_input("Enter Young's modulus E (MPa)", 200000.0, float)
poisson_ratio = get_input("Enter Poisson's ratio", 0.3, float)
sigmaY = get_input("Enter yield strength (MPa)", 415.0, float)
sigmaU = get_input("Enter ultimate tensile strength (MPa)", 580.0, float)
fracStrainEng = get_input("Enter engineering strain at fracture (elongation)",
                          0.15, float)
nPoints = get_input("Enter number of interpolation points", 4, int)
material_name = input("Enter material name [steel_rebar]: ")
if not material_name.strip():
    material_name = "steel_rebar"


def eng_to_true_stress(sigma_eng, strain_eng):
    return sigma_eng * (1 + strain_eng)


def eng_to_true_strain(strain_eng):
    return math.log(1 + strain_eng)


def generate_stress_strain(E, sigmaY, sigmaU, fracStrainEng, nPoints):
    points = []
    points.append((sigmaY, 0.0))
    sigma_true_U = eng_to_true_stress(sigmaU, fracStrainEng)
    eps_true_U = eng_to_true_strain(fracStrainEng)
    plastic_U = eps_true_U - sigma_true_U / E
    for i in range(1, nPoints + 1):
        t = i / nPoints
        sigma_eng = sigmaY + t * (sigmaU - sigmaY)
        strain_eng = t * fracStrainEng
        sigma_true = eng_to_true_stress(sigma_eng, strain_eng)
        eps_true = eng_to_true_strain(strain_eng)
        eps_plastic = eps_true - sigma_true / E
        points.append((sigma_true, eps_plastic))
    last = points[-1]
    if abs(last[0] - sigma_true_U) > 1e-6 or abs(last[1] - plastic_U) > 1e-8:
        points.append((sigma_true_U, plastic_U))
    return points


curve = generate_stress_strain(E, sigmaY, sigmaU, fracStrainEng, nPoints)

# Get the first model in the mdb
model = mdb.models.values()[0]

# Create material
model.Material(name=material_name)
material = model.materials[material_name]

material.setValues(
    description=
    'Rebar material: yield={} MPa, ultimate={} MPa, E={} MPa.\n\ngenerated by setup_rebar_material script'
    .format(sigmaY, sigmaU, E))

material.Elastic(dependencies=0,
                 moduli=LONG_TERM,
                 noCompression=OFF,
                 noTension=OFF,
                 table=((E, poisson_ratio), ),
                 temperatureDependency=OFF,
                 type=ISOTROPIC)

material.Density(dependencies=0,
                 distributionType=UNIFORM,
                 fieldName='',
                 table=((density, ), ),
                 temperatureDependency=OFF)

material.Plastic(dataType=HALF_CYCLE,
                 dependencies=0,
                 hardening=ISOTROPIC,
                 numBackstresses=1,
                 rate=OFF,
                 strainRangeDependency=OFF,
                 table=tuple(curve),
                 temperatureDependency=OFF)

material.setValues(materialIdentifier='')
